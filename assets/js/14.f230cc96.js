(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{285:function(n,e,t){"use strict";t.r(e);var a=t(14),s=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"nomad安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nomad安装"}},[n._v("#")]),n._v(" nomad安装")]),n._v(" "),e("div",{staticClass:"language-# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo yum -y install nomad\n")])])]),e("h2",{attrs:{id:"启动nomad服务端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动nomad服务端"}},[n._v("#")]),n._v(" 启动nomad服务端")]),n._v(" "),e("p",[e("code",[n._v("nohup nomad agent --config=/root/nomad/config/server.hcl &")]),n._v(" nomad安装位置")]),n._v(" "),e("div",{staticClass:"language-# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('log_level = "DEBUG"\n\ndata_dir = "/root/nomad/data" //nomad安装目录下新建一个data文件夹\n\nserver {\n    enabled = true\n    bootstrap_expect = 1\n}\n')])])]),e("h2",{attrs:{id:"启动nomad客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动nomad客户端"}},[n._v("#")]),n._v(" 启动nomad客户端")]),n._v(" "),e("p",[e("code",[n._v("nohup nomad agent --config=/root/nomad/config/client.hcl &")]),n._v(" nomad安装位置")]),n._v(" "),e("p",[n._v("client.hcl")]),n._v(" "),e("div",{staticClass:"language-# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('log_level = "DEBUG"\n\ndata_dir = "/root/nomad/data"\n\nname = "client_main"\n\nclient {\n    enabled = true\n    servers = ["main:4647"]\n}\n\nports {\n    http = 5656\n}\nplugin "docker" {\n  config {\n    volumes {\n      enabled = true\n    }\n\n    gc {\n        image = false #开启垃圾回收机制\n    }\n  }\n}\n\nplugin "raw_exec" {\n  config {\n    enabled = true\n  }\n}\n\n')])])]),e("h2",{attrs:{id:"以部署前端为例子-编写一个jobs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以部署前端为例子-编写一个jobs"}},[n._v("#")]),n._v(" 以部署前端为例子，编写一个jobs")]),n._v(" "),e("p",[n._v("（其实就是分配一个任务，也是通过docker部署）")]),n._v(" "),e("div",{staticClass:"language-# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('job "frameui-qd-jobs" {\n\tdatacenters = ["dc1"]\n    type = "service"\n  \tgroup "app" {\n    \ttask "frameui-qd-tasks" {\n      \tdriver = "docker"\n        \tconfig {\n          \tvolumes = ["/home/frontEnd:/home/frontEnd","/home/nginx/conf:/etc/nginx"] #映射关系，对应nginx配置文件里面的location\n            image = "nginx:1.19.4"\n            port_map {\n            \thttp = 80  //服务对外暴露的端口\n            }\n            work_dir="/home/frontEnd/dist"\n          }\n          service {  #consul服务\n            name = "frameui-qd-service"\n            port = "http"\n            check {\n              name     = "alive"\n              type     = "tcp"\n              interval = "10s"\n              timeout  = "2s"\n              check_restart {\n                limit = 10 # 健康检查失败次数，超过此数量服务会重启\n                grace = "60s" # 在启动或者重启服务后进行健康检查前等待的时间\n                ignore_warnings = false # 是否忽视警告\n               }\n            }\n     \t} \n        \tresources {\n              cpu = 10\n              memory = 512\n              network {\n                  port "http" {\n                  \tstatic= 8847   //容器工作的端口\n                  }\n              }\n        }\n         logs {\n        \tmax_files = 5\n           max_file_size = 10\n        }\n      }\n    }\n}\n')])])]),e("h2",{attrs:{id:"部署一个node服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署一个node服务"}},[n._v("#")]),n._v(" 部署一个node服务")]),n._v(" "),e("div",{staticClass:"language-# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('job "node-generatedoc-jobs" {\n\tdatacenters = ["dc1"]\n      type = "service"\n      group "app" {\n        task "node-generatedoc-tasks" {\n          driver = "docker"\n    \tconfig {\n        \tvolumes = ["/home/shr/node-generatedoc:/app"]\n          \timage = "node"\n          \tport_map {\n            \thttp = 4000\n            }\n            work_dir = "/app"\n            command = "npm"\n          \targs = ["run","dev"]\n           extra_hosts = ["web.sp5000.com:10.16.196.196"]\n        }\n        logs {\n        \tmax_files = 5\n           max_file_size = 10\n        }\n    }\n  }\n}\n')])])]),e("h2",{attrs:{id:"部署一个java服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署一个java服务"}},[n._v("#")]),n._v(" 部署一个JAVA服务")]),n._v(" "),e("div",{staticClass:"language-# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('job "shr-centralized-inspect-service-jobs" {\n\tdatacenters = ["dc1"]\n      type = "service"\n      group "app" {\n        task "shr-centralized-inspect-service-tasks" {\n          driver = "docker"\n    \t\t\tconfig {\n        \tvolumes = ["/home/backEnd:/app"]\n          \timage = "openjdk:8"\n          \tport_map {\n            \thttp = 18006\n            }\n            work_dir = "/app"\n            command = "java"\n          \targs = ["-jar","./shr-centralized-inspect-service.jar"]\n           extra_hosts = ["web.sp5000.com:10.16.196.196"]\n        }\n          service {\n            name = "shr-centralized-inspect-service"\n            port = "http"\n\n            check {\n              name     = "alive"\n              type     = "tcp"\n              interval = "10s"\n              timeout  = "2s"\n              check_restart {\n                limit = 10 # 健康检查失败次数，超过此数量服务会重启\n                grace = "60s" # 在启动或者重启服务后进行健康检查前等待的时间\n                ignore_warnings = false # 是否忽视警告\n               }\n            }\n     \t\t } \n        \n         resources {\n              cpu = 1000\n              memory = 1024\n              network {\n                  port "http" {\n                  \tstatic= 8443\n                  }\n              }\n        }\n         logs {\n        \tmax_files = 5\n           max_file_size = 10\n        } \n    }\n  }\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);